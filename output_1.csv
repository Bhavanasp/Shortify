,id,title,body,tags,answers,score
0,59652376,Can't install Pandas in PyCharm,"<p>I'm a total newbie with programming. To get startet a little I've tried to install Pandas in PyCharm with <code>pip install Pandas</code>. When I try to install it via the Terminal or the Settings I receive the following:</p>

<pre><code>  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Could not find a version that satisfies the requirement pandas (from versions: )
No matching distribution found for pandas
</code></pre>

<p>As I have already installed Pandas for usage in the Jypiter Notebook the mac Terminal gives me the following when typing <code>pip install pandas</code>: </p>

<pre><code>Requirement already satisfied: pandas in ./opt/anaconda3/lib/python3.7/site-packages (0.25.1)
Requirement already satisfied: pytz&gt;=2017.2 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2019.3)
Requirement already satisfied: python-dateutil&gt;=2.6.1 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2.8.0)
Requirement already satisfied: numpy&gt;=1.13.3 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (1.17.2)
Requirement already satisfied: six&gt;=1.5 in ./opt/anaconda3/lib/python3.7/site-packages (from python-dateutil&gt;=2.6.1-&gt;pandas) (1.12.0)
Could not fetch URL https://pypi.org/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLError(""bad handshake: SysCallError(-1, 'Unexpected EOF')""))) - skipping
</code></pre>

<p>Although it looks for me like Pandas is already installed on the computer (the anaconda3 in there troubles me), it is not working with PyCharm.
Im using Python 3.8 with PyCharm 2019.3 and my pip version is 19.0.3</p>

<p>I would be glad about any help, thanks a lot!</p>",python|pandas|pip|pycharm|package,"<p>try this please : 
 Pycharm(on your left upper corner) > preferences> Project > Project interpreter > +(plus sign)(the bottom of the table) >  type pandas > download </p>",2
1,59652376,Can't install Pandas in PyCharm,"<p>I'm a total newbie with programming. To get startet a little I've tried to install Pandas in PyCharm with <code>pip install Pandas</code>. When I try to install it via the Terminal or the Settings I receive the following:</p>

<pre><code>  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Could not find a version that satisfies the requirement pandas (from versions: )
No matching distribution found for pandas
</code></pre>

<p>As I have already installed Pandas for usage in the Jypiter Notebook the mac Terminal gives me the following when typing <code>pip install pandas</code>: </p>

<pre><code>Requirement already satisfied: pandas in ./opt/anaconda3/lib/python3.7/site-packages (0.25.1)
Requirement already satisfied: pytz&gt;=2017.2 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2019.3)
Requirement already satisfied: python-dateutil&gt;=2.6.1 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2.8.0)
Requirement already satisfied: numpy&gt;=1.13.3 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (1.17.2)
Requirement already satisfied: six&gt;=1.5 in ./opt/anaconda3/lib/python3.7/site-packages (from python-dateutil&gt;=2.6.1-&gt;pandas) (1.12.0)
Could not fetch URL https://pypi.org/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLError(""bad handshake: SysCallError(-1, 'Unexpected EOF')""))) - skipping
</code></pre>

<p>Although it looks for me like Pandas is already installed on the computer (the anaconda3 in there troubles me), it is not working with PyCharm.
Im using Python 3.8 with PyCharm 2019.3 and my pip version is 19.0.3</p>

<p>I would be glad about any help, thanks a lot!</p>",python|pandas|pip|pycharm|package,"<p>Not sure if this helps but I usually write a small python script in pycharm which imports pandas then in the script windows it will say ""pandas not installed"" then I just click on it and it install the library for me.</p>",-1
2,59652376,Can't install Pandas in PyCharm,"<p>I'm a total newbie with programming. To get startet a little I've tried to install Pandas in PyCharm with <code>pip install Pandas</code>. When I try to install it via the Terminal or the Settings I receive the following:</p>

<pre><code>  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Could not find a version that satisfies the requirement pandas (from versions: )
No matching distribution found for pandas
</code></pre>

<p>As I have already installed Pandas for usage in the Jypiter Notebook the mac Terminal gives me the following when typing <code>pip install pandas</code>: </p>

<pre><code>Requirement already satisfied: pandas in ./opt/anaconda3/lib/python3.7/site-packages (0.25.1)
Requirement already satisfied: pytz&gt;=2017.2 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2019.3)
Requirement already satisfied: python-dateutil&gt;=2.6.1 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2.8.0)
Requirement already satisfied: numpy&gt;=1.13.3 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (1.17.2)
Requirement already satisfied: six&gt;=1.5 in ./opt/anaconda3/lib/python3.7/site-packages (from python-dateutil&gt;=2.6.1-&gt;pandas) (1.12.0)
Could not fetch URL https://pypi.org/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLError(""bad handshake: SysCallError(-1, 'Unexpected EOF')""))) - skipping
</code></pre>

<p>Although it looks for me like Pandas is already installed on the computer (the anaconda3 in there troubles me), it is not working with PyCharm.
Im using Python 3.8 with PyCharm 2019.3 and my pip version is 19.0.3</p>

<p>I would be glad about any help, thanks a lot!</p>",python|pandas|pip|pycharm|package,"<p>IMHO, you need to install <code>openssl</code> with <code>homebrew</code>.</p>

<pre><code>brew install openssl
</code></pre>

<p>You can check this one: <a href=""https://stackoverflow.com/questions/50911641/errors-while-trying-to-install-pip-from-terminal/50912124"">Errors while trying to install pip from terminal</a></p>",0
3,59652376,Can't install Pandas in PyCharm,"<p>I'm a total newbie with programming. To get startet a little I've tried to install Pandas in PyCharm with <code>pip install Pandas</code>. When I try to install it via the Terminal or the Settings I receive the following:</p>

<pre><code>  Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', OSError(0, 'Error'))': /simple/pandas/
  Could not find a version that satisfies the requirement pandas (from versions: )
No matching distribution found for pandas
</code></pre>

<p>As I have already installed Pandas for usage in the Jypiter Notebook the mac Terminal gives me the following when typing <code>pip install pandas</code>: </p>

<pre><code>Requirement already satisfied: pandas in ./opt/anaconda3/lib/python3.7/site-packages (0.25.1)
Requirement already satisfied: pytz&gt;=2017.2 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2019.3)
Requirement already satisfied: python-dateutil&gt;=2.6.1 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (2.8.0)
Requirement already satisfied: numpy&gt;=1.13.3 in ./opt/anaconda3/lib/python3.7/site-packages (from pandas) (1.17.2)
Requirement already satisfied: six&gt;=1.5 in ./opt/anaconda3/lib/python3.7/site-packages (from python-dateutil&gt;=2.6.1-&gt;pandas) (1.12.0)
Could not fetch URL https://pypi.org/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLError(""bad handshake: SysCallError(-1, 'Unexpected EOF')""))) - skipping
</code></pre>

<p>Although it looks for me like Pandas is already installed on the computer (the anaconda3 in there troubles me), it is not working with PyCharm.
Im using Python 3.8 with PyCharm 2019.3 and my pip version is 19.0.3</p>

<p>I would be glad about any help, thanks a lot!</p>",python|pandas|pip|pycharm|package,"<p>I got the same error message.
I tried eveyrthing.
It turns out that Pycharm only has pandas and numpy for professional version. Please check if you use free community version, it does not support pandas or numpy</p>",-1
4,59498471,Python How to access class function variable,"<p>This was a <strong><em>Rock scissors paper</em></strong> game code ,its a <code>humanplayer</code> versus a <code>reflectplayer</code>. <code>Reflectplayer</code> who  copy the last time <code>humanplayer</code> move and show the move. I tried to access the <code>move2</code> from the <code>play_round</code> to <code>ReflectPlayer</code> . But How? Isn't <code>game1.play_round.move2</code> work?</p>

<pre><code>import random

moves = ['rock', 'paper', 'scissors']

class Player:
    def move(self):
        return 'rock'

    def learn(self, my_move, their_move):
        pass

class RandomPlayer:
    def move(self):
        all = [""rock"",""scissors"",""paper""]
        ranint = random.randint(0,2)
        return all[ranint]

    def learn(self, my_move, their_move):
        pass

class HumanPlayer:
    def move(self):
        ans = input(""Rock Paper or Scissors?"").lower()
        return ans

    def learn(self,my_move,their_move):
        pass

class ReflectPlayer:
    def move(self):
        i = 1
        RSP = [""rock"",""paper"",""scissors""]

        print(self.move2)   
        if i == 1:
            i += 1
            return RSP[random.randint(0,2)]
        elif game1.play_round.move2 == RSP[0]:
            return RSP[0]
        elif game1.play_round.move2 == RSP[1]:
            return RSP[1]
        elif game1.play_round.move2 == RSP[2]:
            return RSP[2]
        else:
            print(""Wrong input !"")
            pass
    def learn(self,my_move,their_move):
        pass



def beats(one, two):
    return ((one == 'rock' and two == 'scissors') or
            (one == 'scissors' and two == 'paper') or
            (one == 'paper' and two == 'rock'))


class Game:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2

    def play_round(self):
        move1 = self.p1.move()
        move2 = self.p2.move()
        print(f""Player 1: {move1}  Player 2: {move2}"")
        if beats(move1 , move2) == True:
            print(f""This Round  : Player 1 WIN"")
        elif beats(move2 , move1) == True:
               print(f""This Round  : Player 2 WIN"")
        elif move1 == move2:
               print(""This Round : TIE"")    
        else:
            print(""Wrong Input !"")
        self.p1.learn(move1, move2)
        self.p2.learn(move2, move1)

    def play_game(self):
        print(""Game start!"")
        for round in range(3):
            print(f""Round {round}:"")
            self.play_round()
        print(""Game over!"")

if __name__ == '__main__':
    game1 = Game(ReflectPlayer(),HumanPlayer())
    game1.play_game()
</code></pre>",python|class|variables,"<p>Consider changing your implementation to pass the last moves played to the move() method. If your player needs to use the previous moves then you can access them easily. If not just discard them. I am assuming that you will have other types of players that can benefit from this.</p>

<pre><code>rsp = ['rock', 'paper', 'scissors']

class ReflectPlayer:

    def move(self, lastOpponentMove):
        if lastOpponentMove == None:
            return rsp[random.randint(0,2)]
        elif lastOpponentMove == rsp[0]:
            return rsp[0]
        elif lastOpponentMove == rsp[1]:
            return rsp[1]
        elif lastOpponentMove == rsp[2]:
            return rsp[2]
        else:
            print(""Wrong input !"")
            pass
    def learn(self,my_move,their_move):
        pass
</code></pre>

<p>Possible adaption on the Game class:</p>

<pre><code>class Game:
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.lastP1Move = None
        self.lastP2Move = None

    def play_round(self):
        move1 = self.p1.move(lastP2Move)
        move2 = self.p2.move(lastP1Move)

        lastP1Move = move1
        lastP2Move = move2

        print(f""Player 1: {move1}  Player 2: {move2}"")
        if beats(move1 , move2) == True:
            print(f""This Round  : Player 1 WIN"")
        elif beats(move2 , move1) == True:
            print(f""This Round  : Player 2 WIN"")
        elif move1 == move2:
            print(""This Round : TIE"")    
        else:
            print(""Wrong Input !"")
        self.p1.learn(move1, move2)
        self.p2.learn(move2, move1)
</code></pre>

<p>Some notes:</p>

<ul>
<li>You defined rsp as global in the beginning so you can use that list instead of creating new ones.</li>
<li>The way you implemented the check to see if it was the first play would make it so that i would be 1 everytime. (I changed to see if you are receiving a None last move).</li>
<li>Check your indentation in the play_round method</li>
</ul>

<p>Hope this helps</p>",0
5,30291743,How do I deal with lines that are longer than the Curses window in Python?,"<p>I'd like my curses application to display the absolute path of the current file that it is working with as it iterates. These can get longer than the window, running into the next line. If the next file path is shorter, difference in length is not overwritten, leading to mangled strings. What is the best practice way of fixing this problem?</p>

<p>Edit: Python 3 sample code on Mac OS X</p>

<pre><code>from os import walk
import curses
from os import path

stdscr = curses.initscr()
curses.noecho()
for root, dirs, files in walk(""/Users""):
    for file in files:
        file_path = path.join(root, file)
        stdscr.addstr(0, 0, ""Scanning: {0}"".format(file_path))
        stdscr.clearok(1)
        stdscr.refresh()
</code></pre>",python|curses,"<p>Assuming you don't want to use a window, the simplest solution is:</p>

<ol>
<li>Use <a href=""https://docs.python.org/3/library/curses.html#curses.window.addnstr"" rel=""nofollow""><code>addnstr</code></a> instead of <code>addstr</code> to never write more characters than fit on the line, and</li>
<li>Use <a href=""https://docs.python.org/3/library/curses.html#curses.window.clrtoeol"" rel=""nofollow""><code>clrtoeol</code></a> to erase any leftover characters after the new path.</li>
</ol>

<p>For example:</p>

<pre><code>from scandir import walk
import curses
from os import path

try:
    stdscr = curses.initscr()
    curses.noecho()
    _, width = stdscr.getmaxyx()
    for root, dirs, files in walk(""/Users""):
        for file in files:
            file_path = path.join(root, file)
            stdscr.addnstr(0, 0, ""Scanning: {0}"".format(file_path), width-1)
            stdscr.clrtoeol()
            stdscr.clearok(1)
            stdscr.refresh()
finally:
    curses.endwin()
</code></pre>

<hr>

<p>If you want to do this by creating a larger-than-fullscreen window and clipping it to the terminal, read up on <a href=""https://docs.python.org/3/library/curses.html#curses.newpad"" rel=""nofollow""><code>newpad</code></a>. For a trivial case line this, it won't be any simpler, but for more complex cases it might be what you're looking for:</p>

<pre><code>from scandir import walk
import curses
from os import path

try:
    stdscr = curses.initscr()
    curses.noecho()
    height, width = stdscr.getmaxyx()
    win = curses.newpad(height, 16383)
    for root, dirs, files in walk(""/Users""):
        for file in files:
            file_path = path.join(root, file)
            win.addstr(0, 0, ""Scanning: {0}"".format(file_path))
            win.clrtoeol()
            win.clearok(1)
            win.refresh(0, 0, 0, 0, height-1, width-1)
finally:
    curses.endwin()
</code></pre>",2
6,30305788,"Implement pow(x,n)%d with integers only. (without making use of library functions)","<p>Basically I used the classic divide and conquer whenever the exponent is even and came up with this.</p>

<pre><code>int mymod(int a,int b){ //returns only positive value between 0 to b-1
    return a%b&lt;0 ? (a%b)+b : a%b;
}
int Solution::pow(int x, int n, int d) {
    if(n==0) return mymod(1,d);
    int result = 1;
    while(n&gt;0){
        if(n%2 == 1)
            result = mymod((result * x),d);
        n = n&gt;&gt;1; //dividing exponent by 2, if it's even. Divide and conquer whenever exponent is even
        x = mymod(x*x,d);
    }
    return result;
}
</code></pre>

<p>Now I'm using mymod function to calculate modulus, 'cuz normal modulus gave me a -ve result which wasn't in accordance with the test cases. I need to implement it with integers. There's one major thing to note here. Overflow situation. some test cases have large enough x, which when multiplied might overflow. 
 Here are some of the test cases this program should satisfy.</p>

<pre><code>X : 0
N : 0
D : 1
expected output: 0

X : -1
N : 1
D : 20
expected output: 19

X : 71045970
N : 41535484
D : 64735492
expected output: 20805472
</code></pre>

<p>The above code satisfies the first two test cases (TRIVIAL) but fails at the last test case. Python is also accepted by the OJ, I'll be needing a bit of an explanation in case of python. THANK YOU!! </p>",python|c++|algorithm|pow|divide-and-conquer,"<p>In the line</p>

<pre><code>result = mymod((result * x),d);
</code></pre>

<p>in <code>result * x</code> your both <code>result</code> and <code>x</code> can be as large as <code>d</code> (more precisely, <code>d-1</code>), so you need a data type that can hold integers as big as <code>d*d</code>. For your cases, this may be <code>long long int</code>.</p>

<p>Another approach will be not to use library <code>operator*</code> for <code>int</code>s, but implement a manual multiplication function with a similar divide and conquer approach using only additions. This way you will need a data type that can hold integers as big as <code>2d</code> only.</p>

<p>Also note that you do not need to call <code>mymod</code> each time in the main loop. You can call it only once before the loop to make <code>x</code> positive (<code>x=mymod(x,d)</code>), and then use just the <code>operator%</code>.</p>",0
7,30383070,All of a sudden str.decode('unicode_escape') stopped working [2.7.3],"<p>This snippet is taken from my recent python work. And it used to work just fine</p>

<pre><code>strr = ""What is th\u00e9 point?""
print strr.decode('unicode_escape')
</code></pre>

<p>But now it throws the unicode decoding error:</p>

<pre><code>Traceback (most recent call last):
  File ""C:\Users\Lenon\Documents\WorkDir\pyWork\ocrFinale\F1\tests.py"", line 49, in &lt;module&gt;
    print strr.decode('unicode_escape')
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 10: ordinal not in range(128)
</code></pre>

<p>What is the possible cause of this?</p>",python|unicode,"<p>You either have enabled unicode literals or have created a <em>Unicode</em> object by another means, by mistake.</p>

<p>The <code>strr</code> value is <em>already</em> a unicode object, so in order to decode the value Python first tries to <em>encode</em> to a byte string.</p>

<p>If you have an actual byte string your code works:</p>

<pre><code>&gt;&gt;&gt; strr = ""What is th\u00e9 point?""
&gt;&gt;&gt; strr.decode('unicode_escape')
u'What is th\xe9 point?'
</code></pre>

<p>but as soon as <code>strr</code> is in fact a Unicode object, you get the error as Python tries to <em>encode</em> the object using the default ASCII codec first:</p>

<pre><code>&gt;&gt;&gt; strr.decode('unicode_escape').decode('unicode_escape')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 10: ordinal not in range(128)
</code></pre>

<p>It could be that you enabled <code>unicode_literals</code>, for example:</p>

<pre><code>&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; strr = ""What is th\u00e9 point?""
&gt;&gt;&gt; type(strr)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; strr.decode('unicode_escape')
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 10: ordinal not in range(128)
</code></pre>",3
8,30579950,Grouping by 30 minutes space in Pandas,"<p>I have a sequence of one month of data and I wanted the average value at <code>00:00, 00:30, 01:00, ...23:30</code> for the whole month. If this were in an hourly basis I could simply do</p>

<pre><code>df.groupby(df.index.hour).mean()
</code></pre>

<p>but I have no idea how to do this for a 30 min period. I have tried random things like </p>

<pre><code>df.groupby(df.index.hour*df.index.minute).mean()
</code></pre>

<p>but none of them has worked. Can this be done in Pandas?</p>

<p>Thank you.</p>

<p><em>EDIT</em>
Sample data:</p>

<pre><code>2015-06-01 00:00:00     4.474450  137.007017
2015-06-01 00:30:00     5.661688  138.342549
2015-06-01 01:00:00     6.142984  139.469381
2015-06-01 01:30:00     6.245277  140.780341
2015-06-01 02:00:00     6.368909  141.464176
2015-06-01 02:30:00     6.535648  143.121590
...                          ...         ...
2015-06-04 21:30:00     6.380301  123.523559
2015-06-04 22:00:00     6.118872  124.649216
2015-06-04 22:30:00     6.554864  127.671638
2015-06-04 23:00:00     7.628708  129.960442
2015-06-04 23:30:00     8.082754  132.294248
2015-06-04 00:00:00     7.768733  132.960135
</code></pre>

<p>Note that the the data spans more than a day, but I am looking for the result in as a <code>24*2</code> length array. Since the <code>00:30</code> data will be the average of the data for all the days in that time and so on.</p>",python|pandas,"<p>Assuming you want the average value for each 30 min. period averaged over the month, try using <a href=""http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.resample.html"" rel=""nofollow"">resample</a> (in case your data is not already evenly spaced at 30 minute intervals), and then use groupby.</p>

<pre><code>df = pd.DataFrame(np.random.randn(5000), 
                  columns=['vals'],
                  index=pd.date_range(start=dt.datetime.now(), 
                  periods=5000,
                  freq='30T'))

df = df.resample('30Min')
&gt;&gt;&gt; df.groupby(lambda x: (x.year, x.month, x.hour, x.minute)).vals.mean()
(2015, 6, 0, 0)    -0.120642
(2015, 6, 0, 30)    0.172788
(2015, 6, 1, 0)     0.310861
(2015, 6, 1, 30)   -0.054615
(2015, 6, 2, 0)    -0.122372
(2015, 6, 2, 30)   -0.160935
(2015, 6, 3, 0)     0.290064
(2015, 6, 3, 30)    0.040233
(2015, 6, 4, 0)    -0.267994
(2015, 6, 4, 30)    0.032256
(2015, 6, 5, 0)    -0.240584
(2015, 6, 5, 30)   -0.095077
(2015, 6, 6, 0)    -0.145298
(2015, 6, 6, 30)    0.311680
(2015, 6, 7, 0)    -0.259130
...
(2015, 9, 16, 30)   -0.249618
(2015, 9, 17, 0)     0.000566
(2015, 9, 17, 30)    0.085121
(2015, 9, 18, 0)    -0.008067
(2015, 9, 18, 30)   -0.392995
(2015, 9, 19, 0)    -0.509947
(2015, 9, 19, 30)    0.117550
(2015, 9, 20, 0)     0.076988
(2015, 9, 20, 30)   -0.096187
(2015, 9, 21, 0)    -0.066262
(2015, 9, 21, 30)   -0.274175
(2015, 9, 22, 0)    -0.459320
(2015, 9, 22, 30)    0.685940
(2015, 9, 23, 0)    -0.050148
(2015, 9, 23, 30)    0.038874
Name: a, Length: 192, dtype: float64
</code></pre>

<p>And to view the monthly averages:</p>

<pre><code>df2 = df.reset_index()
df2['year'] = [c[0] for c in df2['index']]
df2['month'] = [c[1] for c in df2['index']]
df2['hour'] = [c[2] for c in df2['index']]
df2['minutes'] = [c[3] for c in df2['index']]

&gt;&gt;&gt; df2.pivot_table(values='vals', 
                    columns=['year', 'month'], 
                    index=['hour', 'minutes'], 
                    aggfunc=np.mean)

year              2015                              
month                6         7         8         9
hour minutes                                        
0    0       -0.120642  0.260686  0.320550  0.374241
     30       0.172788 -0.078378  0.092206  0.151341
1    0        0.310861 -0.210523 -0.005879 -0.162668
     30      -0.054615  0.069194 -0.026174  0.218007
2    0       -0.122372  0.036491  0.266133  0.050847
     30      -0.160935  0.191182  0.205710  0.183733
3    0        0.290064  0.062863  0.042098 -0.167724
     30       0.040233 -0.083346  0.248039  0.654488
4    0       -0.267994 -0.304616 -0.227858 -0.306729
     30       0.032256  0.036278 -0.350544  0.111284
5    0       -0.240584  0.177614  0.174180 -0.156598
     30      -0.095077  0.350684  0.430140  0.050188
6    0       -0.145298  0.260356  0.314880 -0.367434
     30       0.311680 -0.307146 -0.024851 -0.012917
7    0       -0.259130 -0.030620  0.027398 -0.050143
     30       0.283149 -0.465681  0.067154 -0.118537
8    0        0.108188 -0.034551  0.206411 -0.325447
     30      -0.069086 -0.074594 -0.081681  0.087789
9    0       -0.115867  0.257696 -0.056953 -0.000636
     30      -0.194631 -0.018209  0.097634  0.321195
10   0       -0.029710 -0.179173 -0.362098 -0.425820
     30       0.171463 -0.275286  0.124837  0.185941
11   0        0.027725  0.116209  0.397818  0.273722
     30       0.045747  0.113604  0.053537  0.130483
12   0        0.397945  0.106375  0.316335  0.487824
     30      -0.133603  0.352268  0.043338 -0.080617
13   0       -0.152457  0.005833 -0.024060 -0.484102
     30       0.023435 -0.243851 -0.190029 -0.155168
14   0       -0.029532  0.020272  0.299358 -0.158454
     30       0.250930 -0.157656  0.007717 -0.088050
15   0       -0.098546  0.282827 -0.185139 -0.119801
     30      -0.145674 -0.047190 -0.078103 -0.116217
16   0        0.164972  0.190326  0.156651 -0.559833
     30      -0.034718 -0.273184 -0.254462 -0.249618
17   0        0.133240  0.071170 -0.200580  0.000566
     30      -0.030369  0.007821 -0.298061  0.085121
18   0        0.184950  0.013328  0.196898 -0.008067
     30       0.049239 -0.050993  0.008094 -0.392995
19   0       -0.067991 -0.011393 -0.101014 -0.509947
     30      -0.219792  0.098113 -0.297009  0.117550
20   0        0.174875 -0.253166 -0.130623  0.076988
     30      -0.407662 -0.221100  0.172923 -0.096187
21   0        0.041020 -0.381691 -0.090805 -0.066262
     30      -0.163835 -0.158566 -0.466063 -0.274175
22   0       -0.039960  0.400497  0.028426 -0.459320
     30       0.023610 -0.097154 -0.010363  0.685940
23   0       -0.261549  0.010280  0.019144 -0.050148
     30      -0.008354 -0.451011 -0.012453  0.038874
</code></pre>",1
9,30579950,Grouping by 30 minutes space in Pandas,"<p>I have a sequence of one month of data and I wanted the average value at <code>00:00, 00:30, 01:00, ...23:30</code> for the whole month. If this were in an hourly basis I could simply do</p>

<pre><code>df.groupby(df.index.hour).mean()
</code></pre>

<p>but I have no idea how to do this for a 30 min period. I have tried random things like </p>

<pre><code>df.groupby(df.index.hour*df.index.minute).mean()
</code></pre>

<p>but none of them has worked. Can this be done in Pandas?</p>

<p>Thank you.</p>

<p><em>EDIT</em>
Sample data:</p>

<pre><code>2015-06-01 00:00:00     4.474450  137.007017
2015-06-01 00:30:00     5.661688  138.342549
2015-06-01 01:00:00     6.142984  139.469381
2015-06-01 01:30:00     6.245277  140.780341
2015-06-01 02:00:00     6.368909  141.464176
2015-06-01 02:30:00     6.535648  143.121590
...                          ...         ...
2015-06-04 21:30:00     6.380301  123.523559
2015-06-04 22:00:00     6.118872  124.649216
2015-06-04 22:30:00     6.554864  127.671638
2015-06-04 23:00:00     7.628708  129.960442
2015-06-04 23:30:00     8.082754  132.294248
2015-06-04 00:00:00     7.768733  132.960135
</code></pre>

<p>Note that the the data spans more than a day, but I am looking for the result in as a <code>24*2</code> length array. Since the <code>00:30</code> data will be the average of the data for all the days in that time and so on.</p>",python|pandas,"<p>IIUC I think you want the following:</p>

<pre><code>In [13]:
# load the data
t=""""""2015-06-01 00:00:00,4.474450,137.007017
2015-06-01 00:30:00,5.661688,138.342549
2015-06-01 01:00:00,6.142984,139.469381
2015-06-01 01:30:00,6.245277,140.780341
2015-06-01 02:00:00,6.368909,141.464176
2015-06-01 02:30:00,6.535648,143.121590
2015-06-04 21:30:00,6.380301,123.523559
2015-06-04 22:00:00,6.118872,124.649216
2015-06-04 22:30:00,6.554864,127.671638
2015-06-04 23:00:00,7.628708,129.960442
2015-06-04 23:30:00,8.082754,132.294248
2015-06-04 00:00:00,7.768733,132.960135""""""
df = pd.read_csv(io.StringIO(t), index_col=[0], parse_dates=[0], header=None)
df.columns = ['x','y']

In [14]:
# group on the hour and minute attribute of the index
df.groupby([df.index.hour, df.index.minute]).mean()
Out[14]:
              x           y
0  0   6.121592  134.983576
   30  5.661688  138.342549
1  0   6.142984  139.469381
   30  6.245277  140.780341
2  0   6.368909  141.464176
   30  6.535648  143.121590
21 30  6.380301  123.523559
22 0   6.118872  124.649216
   30  6.554864  127.671638
23 0   7.628708  129.960442
   30  8.082754  132.294248
</code></pre>

<p>So the above will group on the index hour and minute attribute of your index, so this gives you the mean for all days that have a value at <code>00:30</code>, <code>01:00</code> etc..</p>",6
10,30579950,Grouping by 30 minutes space in Pandas,"<p>I have a sequence of one month of data and I wanted the average value at <code>00:00, 00:30, 01:00, ...23:30</code> for the whole month. If this were in an hourly basis I could simply do</p>

<pre><code>df.groupby(df.index.hour).mean()
</code></pre>

<p>but I have no idea how to do this for a 30 min period. I have tried random things like </p>

<pre><code>df.groupby(df.index.hour*df.index.minute).mean()
</code></pre>

<p>but none of them has worked. Can this be done in Pandas?</p>

<p>Thank you.</p>

<p><em>EDIT</em>
Sample data:</p>

<pre><code>2015-06-01 00:00:00     4.474450  137.007017
2015-06-01 00:30:00     5.661688  138.342549
2015-06-01 01:00:00     6.142984  139.469381
2015-06-01 01:30:00     6.245277  140.780341
2015-06-01 02:00:00     6.368909  141.464176
2015-06-01 02:30:00     6.535648  143.121590
...                          ...         ...
2015-06-04 21:30:00     6.380301  123.523559
2015-06-04 22:00:00     6.118872  124.649216
2015-06-04 22:30:00     6.554864  127.671638
2015-06-04 23:00:00     7.628708  129.960442
2015-06-04 23:30:00     8.082754  132.294248
2015-06-04 00:00:00     7.768733  132.960135
</code></pre>

<p>Note that the the data spans more than a day, but I am looking for the result in as a <code>24*2</code> length array. Since the <code>00:30</code> data will be the average of the data for all the days in that time and so on.</p>",python|pandas,"<p>Dataframe has a built in method for this called resample just do...</p>

<pre><code>df.resample('30Min',how='mean')
</code></pre>

<p>actually 'how' defaults to mean so you can shorten it to </p>

<pre><code>df.resample('30Min')
</code></pre>",-1
11,20952418,Using python generators in scikit-learn,"<p>I was wondering whether and how it is possible to use a python generator as data input to scikit-learn classifier's .fit() functions? Due to huge amounts of data, this seems to make sense to me. </p>

<p>In particular I am about to implement a random forest approach.</p>

<p>Regards
K</p>",python|generator|scikit-learn|random-forest,"<p>The short answer is ""No, you can't"". Classical Random Forest classifier is not an incremental or online classifier, so you can't discard training data while learning, and have to provide all the dataset at once. </p>

<p>Due to popularity of RF in machine learning (not least because of the good prediction results for some interesting cases), there are some attempts to implement online variation of Random Forest, but to my knowledge those are not yet implemented in any python ML package. </p>

<p>See <a href=""http://www.ymer.org/amir/software/online-random-forests/"" rel=""nofollow"">Amir Saffari's page</a> for such an approach (not Python).</p>",1
12,20952418,Using python generators in scikit-learn,"<p>I was wondering whether and how it is possible to use a python generator as data input to scikit-learn classifier's .fit() functions? Due to huge amounts of data, this seems to make sense to me. </p>

<p>In particular I am about to implement a random forest approach.</p>

<p>Regards
K</p>",python|generator|scikit-learn|random-forest,"<p>The answer is ""no"". To do out of core learning with random forests, you should</p>

<ol>
<li>Split your data into reasonably-sized batches (restricted by the amount of RAM you have; bigger is better);</li>
<li>train separate random forests;</li>
<li><p>append all the underlying trees together in the <code>estimators_</code> member of one of the trees (untested):</p>

<pre><code>for i in xrange(1, len(forests)):
    forests[0].estimators_.extend(forests[i].estimators_)`
</code></pre></li>
</ol>

<p>(Yes, this is hacky, but no solution to this problem has been found yet. Note that with very large datasets, it might pay to just sample a number training examples that fits in the RAM of a big machine instead of training on all of it. Another option is to switch to linear models with SGD, those implement a <code>partial_fit</code> method, but obviously they're limited in the kind of functions they can learn.)</p>",9
13,38701275,Insert Ordered Dict values while using MySQL INSERT INTO,"<p>I encounter this error when I'm trying to insert some values into a table.
Here's my code:</p>

<pre><code>def tsx_insert(self, d_list):

for item in d_list:

    query = """""" INSERT IGNORE INTO tsx_first_insert(protocollo,procedura,oggetto,priorita,
                                                    tipo_richiesta,sottotipo_richiesta,emergenza,
                                                    richiesta,uo_richiedente,autore,scadenza_sla)
                VALUES(%(protocollo)s,%(procedura)s,%(oggetto)s,%(priorita)s,%(tipo_richiesta)s,
                       %(sottotipo_richiesta)s,%(emergenza)s,%(richiesta)s,%(uo_richiedente)s,
                       %(autore)s,%(scadenza_sla)s)""""""

    values = item.values()

    self.exec_query(query,values)
</code></pre>

<p>And here 'exec_query' function:</p>

<pre><code>def exec_query(self, query, params):
    try:
        if self.connected is None:
            self.connect()

        self.cursor = self.connected.cursor()
        self.cursor.connection.autocommit(True)
        self.cursor.execute(query)

        if self.cursor.description:
            self.description = [d[0] for d in self.cursor.description]

        self.rows = self.cursor.rowcount
        self.sql_result = self.cursor.fetchall()
    except MySQLdb.Error, e:
        logging.error('Error {0}: {1}'.format(e.args[0], e.args[1]))
    finally:
        self.cursor.close()
</code></pre>

<p>The error is: ""Error 1064: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '%(protocollo)s,%(procedura)s,%(oggetto)s,%(priorita)s,%(tipo_richiesta)s,
      ' at line 4""</p>

<p>I can't figure out what is the problem. Thank you in advance for your help.</p>",python|mysql|mysql-python|mysql-error-1064,"<p>You forgot to mention your <code>params</code> dictionary in your <code>self.cursor.execute()</code> method call, so the parameter strings were left in place rather than substituted.</p>

<p>Try</p>

<pre><code>   self.cursor.execute(query, params) 
</code></pre>",1
14,38523303,How to reload a Flask app each time it's accessed,"<p>I have a flask app that is accessed using the <code>/get_data</code> endpoint and providing a number as an id (<code>127.0.0.1:55555/get_data=56</code>)    </p>

<pre><code>@app.route('/get_data=&lt;id&gt;') 
def get_vod_tree(id):
    ...
    return render_template('index.html') 
</code></pre>

<p>It invokes a function that fetches some data under that id and creates one json file [static/data.json] with the collected data and then returns render_template('index.html').</p>

<p>In the index.html there is a call to ../static/data_tree.js which in turn reads the json file and outputs a visualization in the browser using d3.js.</p>

<p>When the app runs, I get the same output on the browser even when I use a different id and the json file changes. It only works if I reload the app and then access the url.</p>

<p><strong>My question is:</strong> 
How can I make sure that multiple users get the different outputs according to the id or how can I reload the app when I hit the endpoint.</p>

<p>Afterthought: If multiple users are using the app then there is only one file created each time</p>",python|d3.js|flask,"<p>Thanks for the answers. It helped getting to the bottom of this. It works now like this:</p>

<pre><code>@app.after_request
def apply_caching(response):
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    return response
</code></pre>

<p>So by disabling the cache the application can treat each request as unique.</p>",4
15,38523303,How to reload a Flask app each time it's accessed,"<p>I have a flask app that is accessed using the <code>/get_data</code> endpoint and providing a number as an id (<code>127.0.0.1:55555/get_data=56</code>)    </p>

<pre><code>@app.route('/get_data=&lt;id&gt;') 
def get_vod_tree(id):
    ...
    return render_template('index.html') 
</code></pre>

<p>It invokes a function that fetches some data under that id and creates one json file [static/data.json] with the collected data and then returns render_template('index.html').</p>

<p>In the index.html there is a call to ../static/data_tree.js which in turn reads the json file and outputs a visualization in the browser using d3.js.</p>

<p>When the app runs, I get the same output on the browser even when I use a different id and the json file changes. It only works if I reload the app and then access the url.</p>

<p><strong>My question is:</strong> 
How can I make sure that multiple users get the different outputs according to the id or how can I reload the app when I hit the endpoint.</p>

<p>Afterthought: If multiple users are using the app then there is only one file created each time</p>",python|d3.js|flask,"<p>If you set <code>app.run(debug=True)</code> in your test/dev environment, it will automatically reload your Flask app every time a code change happens.</p>
<p>To reload the application when a static file changes, use the <code>extra_files</code> parameter. See <a href=""https://werkzeug.palletsprojects.com/en/master/serving/"" rel=""nofollow noreferrer"">here</a>.</p>
<p>Example code:</p>
<pre><code>extra_dirs = ['directory/to/watch',]
extra_files = extra_dirs[:]
for extra_dir in extra_dirs:
    for dirname, dirs, files in os.walk(extra_dir):
        for filename in files:
            filename = path.join(dirname, filename)
            if path.isfile(filename):
                extra_files.append(filename)
app.run(extra_files=extra_files)
</code></pre>
<p><a href=""https://stackoverflow.com/a/9511655/4675937"">Source</a></p>",-1
16,38710061,Storing list in a pandas DataFrame column,"<p>I am trying to do some text processing using NLTK and Pandas. </p>

<p>I have DataFrame with column 'text'. I want to add column 'text_tokenized' that will be stored as a nested list.</p>

<p>My code for tokenizing text is: </p>

<pre><code>def sent_word_tokenize(text):
    text = unicode(text, errors='replace')
    sents = sent_tokenize(text)
    tokens = map(word_tokenize, sents)

    return tokens
</code></pre>

<p>Currently, I am trying to apply this function as following:</p>

<pre><code>df['text_tokenized'] = df.apply(lambda row: sent_word_tokenize(row.text), axis=1)
</code></pre>

<p>Which gives me error:</p>

<pre><code>ValueError: Shape of passed values is (100, 3), indices imply (100, 21)
</code></pre>

<p>Not sure how to fix it and what is wrong here.</p>",python|pandas|dataframe|nlp|nltk,"<p>Solved my own question by using different axis:</p>

<p>Instead of:</p>

<pre><code>df['text_tokenized'] = df.apply(lambda row: sent_word_tokenize(row.text), axis=1)
</code></pre>

<p>I used:</p>

<pre><code>df['text_tokenized'] = df.text.apply(lambda text: sent_word_tokenize(text))
</code></pre>

<p>Although I am not sure why it works and I really appreciate if somebody could explain it to me. </p>",2
17,38520750,Writing a custom management command with a string argument,"<p>I know I can add arguments with the add_arguments method like this:</p>

<pre><code>class Command(BaseCommand):
    def add_arguments(self, parser):
        parser.add_argument('--debug', action='store_true', dest='debug', default=False, help='print debug statements')
</code></pre>

<p>Is it possible to add an argument wich has a String as type?
My use case is to add a path to a file.</p>",django|python-3.x,"<p>You can use <code><a href=""https://docs.python.org/3/library/argparse.html#argparse.FileType"" rel=""nofollow"">FileType</a></code></p>

<pre><code>parser.add_argument(""-f"", type=argparse.FileType(), required=True)
</code></pre>",0
18,38363474,Django Models not showing in Admin.py,"<p>I have looked through the other answers extensively, but I just know this is going to turn out to be a silly oversight on my part.</p>

<p>I am a noob on an AWS Bitnami stack. Just trying to make  of simple model show up in my admin.</p>

<p>Models.py:</p>

<pre><code>    from __future__ import unicode_literals

from django.db import models
from django.utils.encoding import python_2_unicode_compatible
# Create your models here.



# Scrollbar ######################################################
@python_2_unicode_compatible
class Marquee(models.Model):
    scrollbar_content = models.CharField(max_length = 2000)

    def __str__(self):
        return self.scrollbar_content
</code></pre>

<p>admin.py:</p>

<pre><code>from django.contrib import admin

# Register your models here.
from .models import Marquee

admin.site.register(Marquee)
</code></pre>

<p>autodiscover() is in urls.py file</p>

<p>my app name is under INSTALLED APPS in settings.py:</p>

<pre><code>INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'movierec',

]
</code></pre>

<p>My PostgreSQL database is working and I have checked it through the Django shell.</p>

<p>Again, I'm sure I've overlooked something foolish. I hope not to waste your time.</p>

<p>Python 2.7 Django 1.9.7
AWS Bitnami stack</p>

<p>Thank you for your patience.</p>",python|django|amazon-ec2|bitnami,"<p>Sorry for the trouble.</p>

<p>I forgot to reload / restart apache and my changes weren't showing up. </p>

<p>Thank you everyone for your help!</p>",0
19,60199004,How does % find the index which to split an array in python,"<p>So I am working on a codility training and working on the CyclicRotation where you rotate an array a given number of steps. I have found several solutions and the one that looks the best does not really make sense to me. </p>

<p>So the solution is:</p>

<pre><code>def solution(A, K):
    if not A:
        return A
    if K == 0:
        return A
    K = -K % len(A)
    print(K)
    print(A)
    print(A[K:])
    print(A[:K])
    return A[K:] + A[:K]
</code></pre>

<p>So I get the splitting of the array by K as this will give you how many should move. But i don't get how to get K. Why do you take the -K and then % by len of the Array? That part does not make sense to me. </p>",python,"<p>Imagine repeating your array infinitely in both directions. So, for example, if you have</p>

<p><code>A = [0,1,2]</code></p>

<p>imagine </p>

<p><code>[...,0,1,2,0,1,2,0,1,2,...]</code></p>

<p>Say we want to circular shift <code>A</code> to the right by <code>1</code>. Our array <code>A</code> should go from <code>[0,1,2]</code> to <code>[2,0,1]</code>. The last element should become the <code>0</code>'th, and every other element should advance by 1 position. In terms of <code>solution</code>, we want <code>solution(A,1)</code>.</p>

<p>One way to think of this is that instead of starting our array at index <code>0</code> (the middle <code>0</code> value) in our infinitely-repeated array and taking the next <code>3</code> values, we can start at index <code>-1</code> and take the next <code>3</code> values. Then, instead of having <code>[0,1,2]</code>, we'd have <code>[2,0,1]</code>. That's what we want. </p>

<p>Likewise, if we want to circular shift <code>A</code> to the left by <code>1</code> (which would be <code>solution(A,-1)</code>), we can start at index <code>1</code> and count <code>3</code> values from there instead. Note that if we want to shift right, we move our index left, and vice versa.</p>

<p>This process is exactly what <code>K = -K % len(A)</code> does. The <code>K = -K</code> part of it deals with the fact that if you're shifting right, you can do that by moving your index to the left along the infinite sequence. The <code>% len(A)</code> part of it essentially treats <code>A</code> as an infinite sequence.</p>",1
20,54202853,"""while"" not working inside ""for"" (completely ignored)","<p>Basically, when I enter the temperature and if the value was more 60 and less than 0, it should say that the code is invalid and please type it again, until it gets a value between 1 and 59. But for my code, the while loop is like completely ignored... Why is that?</p>

<pre><code># TASK 1:
midDayTemp = float()
midNightTemp = float()
midDayList = []
midNightList = []

for day in range (3):
    print (""Day:"", day + 1)
    midDayTemp = float(input(""Please enter your Mid-Day temperature\n""))


    while midDayTemp &gt;= 60 and midDayTemp &lt;= 0:
         midDayTemp = input(""Invalid, please re-enter your temperature\n"")

    midDayList.append(midDayTemp)

    midNightTemp = float(input(""Please enter your Mid-Night temperature\n""))


    while midNightTemp &gt;= 60 and midNightTemp &lt;= 0:
         midNightTemp = input(""Invalid, please re-enter your temperature\n"")

    midNightList.append(midNightTemp)
# TASK 2:
print(""Mid-Day readings are "",midDayList)
midDayAverage = sum(midDayList) / len(midDayList)
print (""The average is "", midDayAverage)
print(""Mid-Night readings are "",midNightList)
midNightAverage = sum(midNightList) / len(midNightList)
print (""The average is "", midNightAverage)


# TASK 3:
minValueMidDay = min(midDayList)
print (""The lowest temperature of the Mid-Day is"", minValueMidDay )
maxValueMidDay = max(midDayList)
print (""The highest temperature of the Mid-Day is"", maxValueMidDay )
minValueMidNight = min(midNightList)
print (""The lowest temperature of the Mid-Night is"", minValueMidNight )
maxValueMidNight = max(midNightList)
print (""The highest temperature of the Mid-Night is"", maxValueMidNight )

print (""Thank you for using my code!"")
</code></pre>

<p>Thank you</p>",python|for-loop|while-loop|for-in-loop,"<p>That is because there is no number that is both greater than or equal to 60 and smaller or equal to zero.</p>

<p>You must change the and for a or.</p>

<pre><code>while midDayTemp &gt;= 60 or midDayTemp &lt;= 0:
</code></pre>",2
21,54117786,Add numpy.get_include() argument to setuptools without preinstalled numpy,"<p>I am currently developing a python package that uses <code>cython</code> and <code>numpy</code> and I want the package to be installable using the <code>pip install</code> command from a clean python installation. All dependencies should be installed automatically. I am using <code>setuptools</code> with the following <code>setup.py</code>:</p>

<pre><code>import setuptools

my_c_lib_ext = setuptools.Extension(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)

setuptools.setup(
    name=""my_lib"",
    version=""0.0.1"",
    author=""Me"",
    author_email=""me@myself.com"",
    description=""Some python library"",
    packages=[""my_lib""],
    ext_modules=[my_c_lib_ext],
    setup_requires=[""cython &gt;= 0.29""],
    install_requires=[""numpy &gt;= 1.15""],
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Operating System :: OS Independent""
    ]
)
</code></pre>

<p>This has worked great so far. The <code>pip install</code> command downloads <code>cython</code> for the build and is able to build my package and install it together with <code>numpy</code>.</p>

<p>Now I want to improve the performance of my <code>cython</code> code, which leads to some changes in my <code>setup.py</code>. I need to add <code>include_dirs=[numpy.get_include()]</code> to either the call of <code>setuptools.Extension(...)</code> or <code>setuptools.setup(...)</code> which means that I also need to <code>import numpy</code>. (See <a href=""http://docs.cython.org/en/latest/src/tutorial/numpy.html"" rel=""noreferrer"">http://docs.cython.org/en/latest/src/tutorial/numpy.html</a> and <a href=""https://stackoverflow.com/questions/2379898/make-distutils-look-for-numpy-header-files-in-the-correct-place"">Make distutils look for numpy header files in the correct place</a> for rationals.)</p>

<p>This is bad. Now the user cannot call <code>pip install</code> from a clean environment, because <code>import numpy</code> will fail. The user needs to <code>pip install numpy</code> before installing my library. Even if I move <code>""numpy &gt;= 1.15""</code> from <code>install_requires</code> to <code>setup_requires</code> the installation fails, because the <code>import numpy</code> is evaluated earlier.</p>

<p>Is there a way to evaluate the <code>include_dirs</code> at a later point of the installation, for example, after the dependencies from <code>setup_requires</code> or <code>install_requires</code> have been resolved? I really like to have all dependencies resolved automatically and I dont want the user to type multiple <code>pip install</code> commands.</p>

<p>The following snippet works, but it is not officially supported because it uses an undocumented (and private) method:</p>

<pre><code>class NumpyExtension(setuptools.Extension):
    # setuptools calls this function after installing dependencies
    def _convert_pyx_sources_to_lang(self):
        import numpy
        self.include_dirs.append(numpy.get_include())
        super()._convert_pyx_sources_to_lang()

my_c_lib_ext = NumpyExtension(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)
</code></pre>

<p>The article <a href=""https://stackoverflow.com/questions/19919905/how-to-bootstrap-numpy-installation-in-setup-py"">How to Bootstrap numpy installation in setup.py</a> proposes using a <code>cmdclass</code> with custom <code>build_ext</code> class. Unfortunately, this breaks the build of the <code>cython</code> extension because <code>cython</code> also customizes <code>build_ext</code>.</p>",python-3.x|numpy|cython|setuptools,"<p>One (hacky) suggestion would be using the fact that <code>extension.include_dirs</code> is first requested in <code>build_ext</code>, which is called after the setup dependencies are downloaded.</p>

<pre><code>class MyExt(setuptools.Extension):
    def __init__(self, *args, **kwargs):
        self.__include_dirs = []
        super().__init__(*args, **kwargs)

    @property
    def include_dirs(self):
        import numpy
        return self.__include_dirs + [numpy.get_include()]

    @include_dirs.setter
    def include_dirs(self, dirs):
        self.__include_dirs = dirs


my_c_lib_ext = MyExt(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)

setup(
    ...,
    setup_requires=['cython', 'numpy'],
)
</code></pre>

<hr>

<h3>Update</h3>

<p>Another (less, but I guess still pretty hacky) solution would be overriding <code>build</code> instead of <code>build_ext</code>, since we know that <code>build_ext</code> is a subcommand of <code>build</code> and will always be invoked by <code>build</code> on installation. This way, we don't have to touch <code>build_ext</code> and leave it to Cython. This will also work when invoking <code>build_ext</code> directly (e.g., via <code>python setup.py build_ext</code> to rebuild the extensions inplace while developing) because <a href=""https://github.com/python/cpython/blob/master/Lib/distutils/command/build_ext.py#L133"" rel=""nofollow noreferrer""><code>build_ext</code> ensures all options of <code>build</code> are initialized</a>, and by coincidence, <a href=""https://github.com/python/cpython/blob/master/Lib/distutils/cmd.py#L287"" rel=""nofollow noreferrer""><code>Command.set_undefined_options</code> first ensures the command has finalized</a> (I know, <code>distutils</code> is a mess).</p>

<p>Of course, now we're misusing <code>build</code> - it runs code that belongs to <code>build_ext</code> finalization. However, I'd still probably go with this solution rather than with the first one, ensuring the relevant piece of code is properly documented.</p>

<pre><code>import setuptools
from distutils.command.build import build as build_orig


class build(build_orig):

    def finalize_options(self):
        super().finalize_options()
        # I stole this line from ead's answer:
        __builtins__.__NUMPY_SETUP__ = False
        import numpy
        # or just modify my_c_lib_ext directly here, ext_modules should contain a reference anyway
        extension = next(m for m in self.distribution.ext_modules if m == my_c_lib_ext)
        extension.include_dirs.append(numpy.get_include())


my_c_lib_ext = setuptools.Extension(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)

setuptools.setup(
    ...,
    ext_modules=[my_c_lib_ext],
    cmdclass={'build': build},
    ...
)
</code></pre>",3
22,54117786,Add numpy.get_include() argument to setuptools without preinstalled numpy,"<p>I am currently developing a python package that uses <code>cython</code> and <code>numpy</code> and I want the package to be installable using the <code>pip install</code> command from a clean python installation. All dependencies should be installed automatically. I am using <code>setuptools</code> with the following <code>setup.py</code>:</p>

<pre><code>import setuptools

my_c_lib_ext = setuptools.Extension(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)

setuptools.setup(
    name=""my_lib"",
    version=""0.0.1"",
    author=""Me"",
    author_email=""me@myself.com"",
    description=""Some python library"",
    packages=[""my_lib""],
    ext_modules=[my_c_lib_ext],
    setup_requires=[""cython &gt;= 0.29""],
    install_requires=[""numpy &gt;= 1.15""],
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Operating System :: OS Independent""
    ]
)
</code></pre>

<p>This has worked great so far. The <code>pip install</code> command downloads <code>cython</code> for the build and is able to build my package and install it together with <code>numpy</code>.</p>

<p>Now I want to improve the performance of my <code>cython</code> code, which leads to some changes in my <code>setup.py</code>. I need to add <code>include_dirs=[numpy.get_include()]</code> to either the call of <code>setuptools.Extension(...)</code> or <code>setuptools.setup(...)</code> which means that I also need to <code>import numpy</code>. (See <a href=""http://docs.cython.org/en/latest/src/tutorial/numpy.html"" rel=""noreferrer"">http://docs.cython.org/en/latest/src/tutorial/numpy.html</a> and <a href=""https://stackoverflow.com/questions/2379898/make-distutils-look-for-numpy-header-files-in-the-correct-place"">Make distutils look for numpy header files in the correct place</a> for rationals.)</p>

<p>This is bad. Now the user cannot call <code>pip install</code> from a clean environment, because <code>import numpy</code> will fail. The user needs to <code>pip install numpy</code> before installing my library. Even if I move <code>""numpy &gt;= 1.15""</code> from <code>install_requires</code> to <code>setup_requires</code> the installation fails, because the <code>import numpy</code> is evaluated earlier.</p>

<p>Is there a way to evaluate the <code>include_dirs</code> at a later point of the installation, for example, after the dependencies from <code>setup_requires</code> or <code>install_requires</code> have been resolved? I really like to have all dependencies resolved automatically and I dont want the user to type multiple <code>pip install</code> commands.</p>

<p>The following snippet works, but it is not officially supported because it uses an undocumented (and private) method:</p>

<pre><code>class NumpyExtension(setuptools.Extension):
    # setuptools calls this function after installing dependencies
    def _convert_pyx_sources_to_lang(self):
        import numpy
        self.include_dirs.append(numpy.get_include())
        super()._convert_pyx_sources_to_lang()

my_c_lib_ext = NumpyExtension(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)
</code></pre>

<p>The article <a href=""https://stackoverflow.com/questions/19919905/how-to-bootstrap-numpy-installation-in-setup-py"">How to Bootstrap numpy installation in setup.py</a> proposes using a <code>cmdclass</code> with custom <code>build_ext</code> class. Unfortunately, this breaks the build of the <code>cython</code> extension because <code>cython</code> also customizes <code>build_ext</code>.</p>",python-3.x|numpy|cython|setuptools,"<p>First question, when is <code>numpy</code> needed? It is needed during the setup (i.e. when <code>build_ext</code>-funcionality is called) and in the installation, when the module is used. That means <code>numpy</code> should be in <code>setup_requires</code> <strong>and</strong> in <code>install_requires</code>.</p>
<p>There are following alternatives to solve the issue for the setup:</p>
<ol>
<li>using PEP <a href=""https://www.python.org/dev/peps/pep-0517/"" rel=""noreferrer"">517</a>/<a href=""https://www.python.org/dev/peps/pep-0518/"" rel=""noreferrer"">518</a> (which is more straight forward IMO)</li>
<li>using <code>setup_requires</code>-argument of <code>setup</code> and postponing  import of <code>numpy</code> until setup's requirements are satisfied (which is not the case at the start of <code>setup.py</code>'s execution)</li>
</ol>
<hr />
<h2><strong>PEP 517/518-solution:</strong></h2>
<p>Put next to <code>setup.py</code> a <code>pyproject.toml</code>-file , with the following content:</p>
<pre><code>[build-system]
requires = [&quot;setuptools&quot;, &quot;wheel&quot;, &quot;Cython&gt;=0.29&quot;, &quot;numpy &gt;= 1.15&quot;]
</code></pre>
<p>which defines packages needed for building, and then install using <code>pip install .</code> in the folder with <code>setup.py</code>. A disadvantage of this method is that <code>python setup.py install</code> no longer works, as it is <code>pip</code> that reads <code>pyproject.toml</code>. However, I would use this approach whenever possible.</p>
<hr />
<h2><strong>Posponing import</strong></h2>
<p>This approach is more complicated and somewhat hacky, but works also without <code>pip</code>.</p>
<p>First, let's take a look at unsuccessful tries so far:</p>
<p><strong>pybind11-trick</strong>
@chrisb's &quot;pybind11&quot;-trick, which can be found <a href=""https://github.com/pybind/python_example/blob/2ed5a68759cd6ff5d2e5992a91f08616ef457b5c/setup.py#L9"" rel=""noreferrer"">here</a>: With help of an indirection, one delays the call to <code>import numpy</code> until numpy is present during the setup-phase, i.e.:</p>
<pre><code>class get_numpy_include(object):

    def __str__(self):
        import numpy
        return numpy.get_include()
...
my_c_lib_ext = setuptools.Extension(
    ...
    include_dirs=[get_numpy_include()]
)
</code></pre>
<p>Clever! The problem: it doesn't work with the Cython-compiler: somewhere down the line, Cython passes the <code>get_numpy_include</code>-object to <code>os.path.join(...,...)</code> which checks whether the argument is really a string, which it obviously isn't.</p>
<p>This could be fixed by inheriting from <code>str</code>, but the above shows the dangers of the approach in the long run - it doesn't use the designed mechanics, is brittle and may easily fail in the future.</p>
<p><strong>the classical <a href=""https://stackoverflow.com/a/21621689/5769463""><code>build_ext</code>-solution</a></strong></p>
<p>Which looks as following:</p>
<pre><code>...
from setuptools.command.build_ext import build_ext as _build_ext

class build_ext(_build_ext):
    def finalize_options(self):
        _build_ext.finalize_options(self)
        # Prevent numpy from thinking it is still in its setup process:
        __builtins__.__NUMPY_SETUP__ = False
        import numpy
        self.include_dirs.append(numpy.get_include())

setupttools.setup(
    ...
    cmdclass={'build_ext':build_ext},
    ...
)
</code></pre>
<p>Yet also this solution doesn't work with cython-extensions, because <code>pyx</code>-files don't get recognized.</p>
<p>The real question is, how did <code>pyx</code>-files get recognized in the first place? The answer is <a href=""https://github.com/pypa/setuptools/blob/a94ccbf404a79d56f9b171024dee361de9a948da/setuptools/command/build_ext.py#L15"" rel=""noreferrer"">this part</a> of <code>setuptools.command.build_ext</code>:</p>
<pre><code>...
try:
    # Attempt to use Cython for building extensions, if available
    from Cython.Distutils.build_ext import build_ext as _build_ext
    # Additionally, assert that the compiler module will load
    # also. Ref #1229.
    __import__('Cython.Compiler.Main')
except ImportError:
    _build_ext = _du_build_ext
...
</code></pre>
<p>That means <code>setuptools</code> tries to use the Cython's build_ext if possible, and because the import of the module is delayed until <code>build_ext</code> is called, it founds Cython present.</p>
<p>The situation is different when <code>setuptools.command.build_ext</code> is imported at the beginning of the <code>setup.py</code> - the Cython isn't yet present and a fall back without cython-functionality is used.</p>
<p><strong>mixing up pybind11-trick and classical solution</strong></p>
<p>So let's add an indirection, so we don't have to import <code>setuptools.command.build_ext</code> directly at the beginning of <code>setup.py</code>:</p>
<pre><code>....
# factory function
def my_build_ext(pars):
     # import delayed:
     from setuptools.command.build_ext import build_ext as _build_ext#
 
     # include_dirs adjusted: 
     class build_ext(_build_ext):
         def finalize_options(self):
             _build_ext.finalize_options(self)
             # Prevent numpy from thinking it is still in its setup process:
             __builtins__.__NUMPY_SETUP__ = False
             import numpy
             self.include_dirs.append(numpy.get_include())
     
    #object returned:
    return build_ext(pars)
...
setuptools.setup(
    ...
    cmdclass={'build_ext' : my_build_ext},
    ...
)
</code></pre>",13
23,54117786,Add numpy.get_include() argument to setuptools without preinstalled numpy,"<p>I am currently developing a python package that uses <code>cython</code> and <code>numpy</code> and I want the package to be installable using the <code>pip install</code> command from a clean python installation. All dependencies should be installed automatically. I am using <code>setuptools</code> with the following <code>setup.py</code>:</p>

<pre><code>import setuptools

my_c_lib_ext = setuptools.Extension(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)

setuptools.setup(
    name=""my_lib"",
    version=""0.0.1"",
    author=""Me"",
    author_email=""me@myself.com"",
    description=""Some python library"",
    packages=[""my_lib""],
    ext_modules=[my_c_lib_ext],
    setup_requires=[""cython &gt;= 0.29""],
    install_requires=[""numpy &gt;= 1.15""],
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""Operating System :: OS Independent""
    ]
)
</code></pre>

<p>This has worked great so far. The <code>pip install</code> command downloads <code>cython</code> for the build and is able to build my package and install it together with <code>numpy</code>.</p>

<p>Now I want to improve the performance of my <code>cython</code> code, which leads to some changes in my <code>setup.py</code>. I need to add <code>include_dirs=[numpy.get_include()]</code> to either the call of <code>setuptools.Extension(...)</code> or <code>setuptools.setup(...)</code> which means that I also need to <code>import numpy</code>. (See <a href=""http://docs.cython.org/en/latest/src/tutorial/numpy.html"" rel=""noreferrer"">http://docs.cython.org/en/latest/src/tutorial/numpy.html</a> and <a href=""https://stackoverflow.com/questions/2379898/make-distutils-look-for-numpy-header-files-in-the-correct-place"">Make distutils look for numpy header files in the correct place</a> for rationals.)</p>

<p>This is bad. Now the user cannot call <code>pip install</code> from a clean environment, because <code>import numpy</code> will fail. The user needs to <code>pip install numpy</code> before installing my library. Even if I move <code>""numpy &gt;= 1.15""</code> from <code>install_requires</code> to <code>setup_requires</code> the installation fails, because the <code>import numpy</code> is evaluated earlier.</p>

<p>Is there a way to evaluate the <code>include_dirs</code> at a later point of the installation, for example, after the dependencies from <code>setup_requires</code> or <code>install_requires</code> have been resolved? I really like to have all dependencies resolved automatically and I dont want the user to type multiple <code>pip install</code> commands.</p>

<p>The following snippet works, but it is not officially supported because it uses an undocumented (and private) method:</p>

<pre><code>class NumpyExtension(setuptools.Extension):
    # setuptools calls this function after installing dependencies
    def _convert_pyx_sources_to_lang(self):
        import numpy
        self.include_dirs.append(numpy.get_include())
        super()._convert_pyx_sources_to_lang()

my_c_lib_ext = NumpyExtension(
    name=""my_c_lib"",
    sources=[""my_c_lib/some_file.pyx""]
)
</code></pre>

<p>The article <a href=""https://stackoverflow.com/questions/19919905/how-to-bootstrap-numpy-installation-in-setup-py"">How to Bootstrap numpy installation in setup.py</a> proposes using a <code>cmdclass</code> with custom <code>build_ext</code> class. Unfortunately, this breaks the build of the <code>cython</code> extension because <code>cython</code> also customizes <code>build_ext</code>.</p>",python-3.x|numpy|cython|setuptools,"<p>I found a very easy solution in <a href=""https://luminousmen.com/post/resolve-cython-and-numpy-dependencies"" rel=""nofollow noreferrer"">this post</a>:</p>

<blockquote>
  <p>Or you can stick to <a href=""https://github.com/pypa/pip/issues/5761"" rel=""nofollow noreferrer"">https://github.com/pypa/pip/issues/5761</a>. Here you install cython and numpy using setuptools.dist before actual setup:</p>
</blockquote>

<pre><code>from setuptools import dist
dist.Distribution().fetch_build_eggs(['Cython&gt;=0.15.1', 'numpy&gt;=1.10'])
</code></pre>

<p>Works well for me!</p>",1
24,54014310,Locale-aware method to print large number with commas and decimals,"<p>There are many well established answers for how to print numbers with commas and/or decimal places, examples <a href=""https://stackoverflow.com/questions/1823058/how-to-print-number-with-commas-as-thousands-separators"">here</a>, <a href=""https://stackoverflow.com/questions/455612/limiting-floats-to-two-decimal-points"">here</a>, <a href=""https://stackoverflow.com/questions/36626017/format-a-number-with-comma-separators-and-round-to-2-decimal-places-in-python-2"">here</a>, etc.</p>

<p>For some reason I cannot find a clear answer on how to do this for large numbers with decimals in a locale-aware way that does not force me to hard-code in the precision (e.g. when reading a file and printing values from it, no prior knowledge of how large or precise the numbers will be). </p>

<p>To make things more complicated I am also hoping to do this in a Python 2.7/3.x cross-compatible way. </p>

<p>So, if I had a number such as <code>1000000.01</code>, I would want it printed as ""1,000,000.01"", and <code>1000000.00001</code> as ""1,000,000.00001"".</p>

<p>Here are methods I have tried which do not work:</p>

<p>(using the standard <a href=""https://docs.python.org/2.7/library/string.html#format-specification-mini-language"" rel=""nofollow noreferrer"">string formatter</a>)</p>

<pre><code># https://docs.python.org/2.7/library/string.html#format-specification-mini-language
x = 1000000.01
print(""{:n}"".format(x)) # 1e+06 ; locale-aware but doesn't work?
print(""{:g}"".format(x)) # 1e+06 ; doesn't work
print(""{:f}"".format(x)) # 1000000.010000 ; wrong number of decimal places
print(""{:,}"".format(x)) # 1,000,000.01 ; desired result but not locale-aware (?)
</code></pre>

<p>based on the docs, <code>""{:n}""</code> sounds like what I want but does not seem to actually work. <code>""{:,}""</code> gives the desired result but does not seem to be locale-aware (as per the docs listed; need clarification on this).</p>

<p>(using <code>locale</code> <a href=""https://docs.python.org/2/library/locale.html"" rel=""nofollow noreferrer"">library</a>)</p>

<pre><code># https://docs.python.org/2/library/locale.html
import locale
locale.setlocale(locale.LC_ALL, '')
print(locale.format(""%g"", x, grouping = True)) # 1e+06 ; doesn't work
print(locale.format(""%d"", x, grouping = True)) # 1,000,000 ; loses decimal place
# print(locale.format(""%n"", x, grouping = True)) # ValueError: format() must be given exactly one %char format specifier, '%n' not valid
# print(locale.format(""{:n}"", x, grouping = True)) # ValueError: format() must be given exactly one %char format specifier, '{:n}' not valid

print(locale.format_string(""%g"", x, grouping = True)) # 1e+06 ; doesn't work
# print(locale.format_string(""%n"", x, grouping = True)) # TypeError: not enough arguments for format string
print(locale.format_string(""{:n}"", x, grouping = True)) # {:n} ; not a valid formatter ?
</code></pre>

<p>It seems like <code>locale.format(""%g"", ...)</code> is closest to what I want but it does not appear to work correctly:</p>

<pre><code>print(locale.format(""%g"", 1000.01, grouping = True)) # 1,000.01 ; works but only for small numbers
print(locale.format(""%g"", 10000.01, grouping = True)) # 10,000 ; doesn't work, loses decimal
</code></pre>

<p>It also seems like the <code>n</code> formatter is missing from <code>local.format</code>. </p>

<p>Any ideas? Seems really weird that there is no common established method for this, that I've found so far at least.</p>",python|printing,"<p>I mean, you could split at the decimal point and compute separately. It might not be ideal but it works.</p>

<pre><code># `input` is your number, `output` is the formatted string.
import locale #import
sep = '.' if locale.localeconv()['thousands_sep'] == ',' else ',' #get locale sep
parts = str(input).split(sep) #get part before and after the sep
parts[0] = locale.format(""%d"", parts[0], grouping=True) #format **part 0**
output = sep.join(parts) #rejoin
</code></pre>

<p>I think this will do it.</p>

<p>The main part of importance here is the call to <code>locale.localeconv()['thousands_sep']</code>, which gets the value separator. Then, you invert it on the same line, so that a comma becomes a period and vice verca.</p>",0
